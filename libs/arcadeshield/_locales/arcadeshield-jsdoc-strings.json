{
  "Bitmap.blit": "Copy an image from a source rectangle to a destination rectangle, stretching or\ncompressing to fit the dimensions of the destination rectangle, if necessary.",
  "Bitmap.blitRow": "Scale and copy a row of pixels from a texture.",
  "Bitmap.clone": "Return a copy of the current bitmap\n\nReturn a copy of the current image",
  "Bitmap.copyFrom": "Sets all pixels in the current bitmap from the other bitmap, which has to be of the same size and\nbpp.",
  "Bitmap.doubled": "Stretches the bitmap in both directions by 100%",
  "Bitmap.doubledX": "Stretches the bitmap horizontally by 100%",
  "Bitmap.doubledY": "Stretches the bitmap vertically by 100%",
  "Bitmap.drawBitmap": "Draw given bitmap on the current bitmap",
  "Bitmap.drawCircle": "Draw a circle",
  "Bitmap.drawIcon": "Draw an icon (monochromatic image) using given color",
  "Bitmap.drawLine": "Draw a line",
  "Bitmap.drawRect": "Draw an empty rectangle",
  "Bitmap.drawTransparentBitmap": "Draw given bitmap with transparent background on the current bitmap",
  "Bitmap.equals": "Returns true if the provided image is the same as this image,\notherwise returns false.",
  "Bitmap.fill": "Fill entire bitmap with a given color\n\nFill entire image with a given color",
  "Bitmap.fillCircle": "Fills a circle",
  "Bitmap.fillPolygon4": "Fills a 4-side-polygon",
  "Bitmap.fillRect": "Fill a rectangle",
  "Bitmap.fillTriangle": "Fills a triangle",
  "Bitmap.flipX": "Flips (mirrors) pixels horizontally in the current bitmap\n\nFlips (mirrors) pixels horizontally in the current image",
  "Bitmap.flipY": "Flips (mirrors) pixels vertically in the current bitmap\n\nFlips (mirrors) pixels vertically in the current image",
  "Bitmap.getPixel": "Get a pixel color",
  "Bitmap.getRows": "Copy row(s) of pixel from bitmap to buffer (8 bit per pixel).",
  "Bitmap.height": "Get the height of the bitmap",
  "Bitmap.isMono": "True if the bitmap is monochromatic (black and white)",
  "Bitmap.mapRect": "Replace colors in a rectangle",
  "Bitmap.overlapsWith": "Check if the current bitmap \"collides\" with another",
  "Bitmap.replace": "Replaces one color in an bitmap with another\n\nReplaces one color in an image with another",
  "Bitmap.rotated": "Returns an image rotated by -90, 0, 90, 180, 270 deg clockwise",
  "Bitmap.scroll": "Every pixel in bitmap is moved by (dx,dy)\n\nEvery pixel in image is moved by (dx,dy)",
  "Bitmap.setPixel": "Set pixel color",
  "Bitmap.setRows": "Copy row(s) of pixel from buffer to bitmap.",
  "Bitmap.transposed": "Returns a transposed bitmap (with X/Y swapped)",
  "Bitmap.width": "Get the width of the bitmap",
  "Math": "More complex operations with numbers.",
  "Math.FastRandom": "Fast, 16 bit, seedable (pseudo) random generator.",
  "Math.FastRandom.next": "@returns the next random number between 0x0001 and 0xFFFF inclusive",
  "Math.FastRandom.percentChance": "@returns a boolean with approximately the given percent chance to be true or false",
  "Math.FastRandom.percentChance|param|percent": "the percentage chance that the returned value will be true from 0 - 100",
  "Math.FastRandom.pickRandom": "Returns a random element from the given list",
  "Math.FastRandom.pickRandom|param|list": "The list to choose an element from",
  "Math.FastRandom.randomBool": "@returns a random boolean value",
  "Math.FastRandom.randomRange": "@returns a random value between min and max (inclusive). If min is greater than or equal to max, returns min.",
  "Math.FastRandom.randomRange|param|max": "the maximum value to generate",
  "Math.FastRandom.randomRange|param|min": "the minimum value to generate",
  "Math.FastRandom.reset": "Reset the state to the current seed",
  "Math.percentChance": "Returns a random boolean that is true the given percentage of the time.",
  "Math.percentChance|param|percentage": "The percentage chance that the returned value will be true from 0 - 100",
  "Math.pickRandom": "Returns a random element from the given list",
  "Math.pickRandom|param|list": "The list to choose an element from",
  "ScreenBitmap.brightness": "Gets current screen backlight brightness (0-100)",
  "ScreenBitmap.setBrightness": "Sets the screen backlight brightness (10-100)",
  "bitmap.create": "Create new empty (transparent) bitmap",
  "bitmap.doubledIcon": "Double the size of an icon",
  "bitmap.ofBuffer": "Create new bitmap with given content",
  "bitmap.screenImage": "Get the screen image",
  "bitmaps": "Bitmap manipulation blocks",
  "bitmaps._bitmap": "A bitmap",
  "bitmaps._bitmap|param|bitmap": "the bitmap",
  "bmp": "Tagged bitmap literal converter",
  "context.eventContext": "Gets the current event context if any",
  "context.onIdle": "Registers a function to run when the device is idling",
  "context.popEventContext": "Pops the current event context and restore handlers if any previous context",
  "context.pushEventContext": "Pushes a new event context and clears all handlers",
  "controller": "Access to game controls",
  "controller.Button.addEventListener": "Adds an event handler that will fire whenever the specified event\nis triggered on this button. Handlers added using this method will\nnot conflict with events added via onEvent. The same handler can\nnot be added for the same event more than once.\n* @param event     The event to subscribe to for this button",
  "controller.Button.addEventListener|param|handler": "The code to run when the event triggers",
  "controller.Button.isPressed": "Indicates if the button is currently pressed",
  "controller.Button.onEvent": "Run some code when a button is pressed, released, or held",
  "controller.Button.pauseUntil": "Pauses until a button is pressed or released",
  "controller.Button.pressureLevel": "Indicates how hard the button is pressed, 0-512",
  "controller.Button.removeEventListener": "Removes an event handler registered with addEventListener.\n* @param event     The event that the handler was registered for",
  "controller.Button.removeEventListener|param|handler": "The handler to remove",
  "controller.pauseUntilAnyButtonIsPressed": "Pause the program until a button is pressed",
  "controller.setRepeatDefault": "Configures the timing of the on button repeat event for all of the controller buttons",
  "controller.setRepeatDefault|param|delay": "number of milliseconds from when the button is pressed to when the repeat event starts firing, eg: 500",
  "controller.setRepeatDefault|param|interval": "minimum number of milliseconds between calls to the button repeat event, eg: 30",
  "helpers.imageRotated": "Returns an image rotated by 90, 180, 270 deg clockwise",
  "scene": "Scene transitions and dialog",
  "scene.onUpdate": "Update the position and velocities of sprites",
  "scene.onUpdateInterval": "Run code on an interval of time. This executes before scene.onUpdate()",
  "scene.runtime": "Returns the time since the scene started in milliseconds"
}